```json
{
  "generated_test_class_fqn": "com.deckofcards.usecases.BuildHandsTest",
  "generated_test_code": "package com.deckofcards.usecases;\n\nimport com.deckofcards.adapter.http.dto.response.PlayersResponseDTO;\nimport com.deckofcards.adapter.repository.provider.CardsDbProvider;\nimport com.deckofcards.entities.CardEntity;\nimport com.deckofcards.entities.enums.CardSuit;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass BuildHandsTest {\n\n    @Mock\n    private CardsDbProvider cardsDbProvider;\n\n    @InjectMocks\n    private BuildHands buildHands;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    @DisplayName(\"Construir mãos de jogadores com um deck válido contendo 20 cartas\")\n    void deveConstruirMaosDeJogadores_quandoDeckValidoCom20Cartas() {\n        // Arrange\n        String deckId = \"deck123\";\n        List<CardEntity> cards = Arrays.asList(\n            new CardEntity(UUID.randomUUID(), \"code1\", \"image1\", \"value1\", CardSuit.SPADES, null),\n            new CardEntity(UUID.randomUUID(), \"code2\", \"image2\", \"value2\", CardSuit.HEARTS, null),\n            new CardEntity(UUID.randomUUID(), \"code3\", \"image3\", \"value3\", CardSuit.CLUBS, null),\n            new CardEntity(UUID.randomUUID(), \"code4\", \"image4\", \"value4\", CardSuit.DIAMONDS, null),\n            new CardEntity(UUID.randomUUID(), \"code5\", \"image5\", \"value5\", CardSuit.SPADES, null),\n            new CardEntity(UUID.randomUUID(), \"code6\", \"image6\", \"value6\", CardSuit.HEARTS, null),\n            new CardEntity(UUID.randomUUID(), \"code7\", \"image7\", \"value7\", CardSuit.CLUBS, null),\n            new CardEntity(UUID.randomUUID(), \"code8\", \"image8\", \"value8\", CardSuit.DIAMONDS, null),\n            new CardEntity(UUID.randomUUID(), \"code9\", \"image9\", \"value9\", CardSuit.SPADES, null),\n            new CardEntity(UUID.randomUUID(), \"code10\", \"image10\", \"value10\", CardSuit.HEARTS, null),\n            new CardEntity(UUID.randomUUID(), \"code11\", \"image11\", \"value11\", CardSuit.CLUBS, null),\n            new CardEntity(UUID.randomUUID(), \"code12\", \"image12\", \"value12\", CardSuit.DIAMONDS, null),\n            new CardEntity(UUID.randomUUID(), \"code13\", \"image13\", \"value13\", CardSuit.SPADES, null),\n            new CardEntity(UUID.randomUUID(), \"code14\", \"image14\", \"value14\", CardSuit.HEARTS, null),\n            new CardEntity(UUID.randomUUID(), \"code15\", \"image15\", \"value15\", CardSuit.CLUBS, null),\n            new CardEntity(UUID.randomUUID(), \"code16\", \"image16\", \"value16\", CardSuit.DIAMONDS, null),\n            new CardEntity(UUID.randomUUID(), \"code17\", \"image17\", \"value17\", CardSuit.SPADES, null),\n            new CardEntity(UUID.randomUUID(), \"code18\", \"image18\", \"value18\", CardSuit.HEARTS, null),\n            new CardEntity(UUID.randomUUID(), \"code19\", \"image19\", \"value19\", CardSuit.CLUBS, null),\n            new CardEntity(UUID.randomUUID(), \"code20\", \"image20\", \"value20\", CardSuit.DIAMONDS, null)\n        );\n\n        when(cardsDbProvider.findCardsByDeckId(deckId)).thenReturn(cards);\n\n        // Act\n        PlayersResponseDTO atual_Response = buildHands.execute(deckId);\n\n        // Assert\n        assertNotNull(atual_Response);\n        assertEquals(4, atual_Response.getPlayers().size());\n        verify(cardsDbProvider, times(1)).findCardsByDeckId(deckId);\n    }\n\n    @Test\n    @DisplayName(\"Construir mãos de jogadores com um deck vazio\")\n    void deveConstruirMaosDeJogadores_quandoDeckVazio() {\n        // Arrange\n        String deckId = \"deck123\";\n        List<CardEntity> cards = Collections.emptyList();\n\n        when(cardsDbProvider.findCardsByDeckId(deckId)).thenReturn(cards);\n\n        // Act\n        PlayersResponseDTO atual_Response = buildHands.execute(deckId);\n\n        // Assert\n        assertNotNull(atual_Response);\n        assertTrue(atual_Response.getPlayers().isEmpty());\n        verify(cardsDbProvider, times(1)).findCardsByDeckId(deckId);\n    }\n\n    @Test\n    @DisplayName(\"Construir mãos de jogadores com um deck contendo menos de 20 cartas\")\n    void deveConstruirMaosDeJogadores_quandoDeckComMenosDe20Cartas() {\n        // Arrange\n        String deckId = \"deck123\";\n        List<CardEntity> cards = Arrays.asList(\n            new CardEntity(UUID.randomUUID(), \"code1\", \"image1\", \"value1\", CardSuit.SPADES, null),\n            new CardEntity(UUID.randomUUID(), \"code2\", \"image2\", \"value2\", CardSuit.HEARTS, null),\n            new CardEntity(UUID.randomUUID(), \"code3\", \"image3\", \"value3\", CardSuit.CLUBS, null)\n        );\n\n        when(cardsDbProvider.findCardsByDeckId(deckId)).thenReturn(cards);\n\n        // Act\n        PlayersResponseDTO atual_Response = buildHands.execute(deckId);\n\n        // Assert\n        assertNotNull(atual_Response);\n        assertEquals(0, atual_Response.getPlayers().size());\n        verify(cardsDbProvider, times(1)).findCardsByDeckId(deckId);\n    }\n\n    @Test\n    @DisplayName(\"Construir mãos de jogadores com cartas contendo valores nulos\")\n    void deveConstruirMaosDeJogadores_quandoCartasComValoresNulos() {\n        // Arrange\n        String deckId = \"deck123\";\n        List<CardEntity> cards = Arrays.asList(\n            new CardEntity(UUID.randomUUID(), \"code1\", \"image1\", null, CardSuit.SPADES, null),\n            new CardEntity(UUID.randomUUID(), \"code2\", \"image2\", null, CardSuit.HEARTS, null)\n        );\n\n        when(cardsDbProvider.findCardsByDeckId(deckId)).thenReturn(cards);\n\n        // Act\n        PlayersResponseDTO atual_Response = buildHands.execute(deckId);\n\n        // Assert\n        assertNotNull(atual_Response);\n        assertTrue(atual_Response.getPlayers().isEmpty());\n        verify(cardsDbProvider, times(1)).findCardsByDeckId(deckId);\n    }\n}"
}
```